# -*- coding: utf-8 -*-
"""Koralai Browser v1.0

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SlmoHTJXybWuxo7StxRPJYpMUczm5tqZ
"""

# Koralai Web Browser - v1.0.0
# Project: Koralai Surf - Private Bookmarking Application
# Purpose: A secure, private browser focused on content curation, bookmarking, and an enhanced user experience.
# This version introduces a major UI overhaul, a local SQLite database for bookmarks, and advanced features.

import sys
import json
import os
import sqlite3
import importlib.util
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLineEdit, QPushButton, QTabWidget, QToolBar, QSplitter, QMessageBox,
    QListWidget, QListWidgetItem, QLabel, QDialog, QFormLayout,
    QDialogButtonBox, QCheckBox, QMenu,
)
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtWebEngineCore import QWebEnginePage, QWebEngineProfile, QWebEngineSettings
from PyQt6.QtCore import QUrl, Qt, pyqtSlot
from PyQt6.QtGui import QAction, QIcon, QPixmap

# --- Configuration ---
CONFIG = {
    "window_title": "Koralai Surf | Your Private Content Manager",
    "initial_width": 1600,
    "initial_height": 900,
    "database_file": "koralai_user_data.db",
    "addons_folder": "addons",
    "default_homepage": "https://www.google.com"
}

# --- Database Manager ---
class DatabaseManager:
    """Handles all SQLite database operations for bookmarks and settings."""
    def __init__(self, db_file):
        self.conn = sqlite3.connect(db_file)
        self.conn.row_factory = sqlite3.Row
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()
        # UPGRADE: Added a 'tags' column for better organization and a 'type' for content distinction.
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS bookmarks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                url TEXT NOT NULL UNIQUE,
                notes TEXT,
                tags TEXT,
                type TEXT DEFAULT 'link',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        self.conn.commit()

    def add_bookmark(self, title, url, notes="", tags=""):
        try:
            with self.conn:
                self.conn.execute(
                    "INSERT INTO bookmarks (title, url, notes, tags) VALUES (?, ?, ?, ?)",
                    (title, url, notes, tags)
                )
            return True
        except sqlite3.IntegrityError:
            print(f"DIAG-WARN: Bookmark for {url} already exists.")
            return False

    def get_bookmarks(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM bookmarks ORDER BY created_at DESC")
        return cursor.fetchall()

    def delete_bookmark(self, bookmark_id):
        with self.conn:
            self.conn.execute("DELETE FROM bookmarks WHERE id = ?", (bookmark_id,))

# --- Main Application Window ---
class KoralaiMainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(KoralaiMainWindow, self).__init__(*args, **kwargs)

        self.setWindowTitle(CONFIG["window_title"])
        self.setGeometry(100, 100, CONFIG["initial_width"], CONFIG["initial_height"])

        # --- Initialize Core Components ---
        self.db_manager = DatabaseManager(CONFIG["database_file"])
        self.addons = {}

        # --- UI/UX Overhaul: Windows-style layout ---
        self.setStyleSheet("""
            QMainWindow { background-color: #F0F0F0; }
            QToolBar { background-color: #FFFFFF; border-bottom: 1px solid #CCCCCC; padding: 5px; spacing: 5px; }
            QLineEdit { border: 1px solid #CCCCCC; padding: 5px; border-radius: 5px; }
            QPushButton {
                background-color: #E1E1E1; border: 1px solid #ADADAD;
                padding: 5px 15px; border-radius: 5px;
            }
            QPushButton:hover { background-color: #E5F1FB; border: 1px solid #0078D7; }
            QTabWidget::pane { border-top: 1px solid #CCCCCC; }
            QTabBar::tab {
                background: #F0F0F0; color: #000000; padding: 10px 20px;
                border: 1px solid #CCCCCC; border-bottom: none; border-top-left-radius: 5px; border-top-right-radius: 5px;
            }
            QTabBar::tab:selected { background: #FFFFFF; }
            QSplitter::handle { background-color: #CCCCCC; }
            QListWidget { border: 1px solid #CCCCCC; border-radius: 5px; background-color: #FFFFFF; }
            QLabel#header { font-size: 16px; font-weight: bold; padding: 5px; }
        """)

        # --- Main Layout with Splitter ---
        self.splitter = QSplitter(Qt.Orientation.Horizontal)
        self.setCentralWidget(self.splitter)

        # --- UI FLOW: Left Panel for Bookmarks ("Faves Manager") ---
        self.faves_panel = QWidget()
        self.faves_panel.setMaximumWidth(400)
        faves_layout = QVBoxLayout(self.faves_panel)
        faves_header = QLabel("My Favorites")
        faves_header.setObjectName("header")

        self.bookmarks_list = QListWidget()
        self.bookmarks_list.itemDoubleClicked.connect(self.on_bookmark_selected)
        self.bookmarks_list.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.bookmarks_list.customContextMenuRequested.connect(self.show_bookmark_context_menu)

        faves_layout.addWidget(faves_header)
        faves_layout.addWidget(self.bookmarks_list)

        # --- Main Content Area (Tabs) ---
        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True)
        self.tabs.setTabsClosable(True)
        self.tabs.tabCloseRequested.connect(self.close_tab)
        self.tabs.currentChanged.connect(self.update_ui_on_tab_change)

        self.splitter.addWidget(self.faves_panel)
        self.splitter.addWidget(self.tabs)
        self.splitter.setSizes([300, 1300]) # Initial size ratio

        # --- Setup UI Elements ---
        self.setup_toolbar()
        self.setup_menu_bar()
        self.status_bar = self.statusBar()

        # --- Initial State ---
        self.add_new_tab(QUrl(CONFIG["default_homepage"]), 'Homepage')
        self.refresh_bookmarks_list()

    def setup_toolbar(self):
        nav_toolbar = QToolBar("Navigation")
        nav_toolbar.setMovable(False)
        self.addToolBar(nav_toolbar)

        # UPGRADE: Using icons for a more intuitive "Windows" feel.
        back_btn = QPushButton("<"); back_btn.setToolTip("Back"); back_btn.clicked.connect(self.go_back)
        fwd_btn = QPushButton(">"); fwd_btn.setToolTip("Forward"); fwd_btn.clicked.connect(self.go_forward)
        reload_btn = QPushButton("↻"); reload_btn.setToolTip("Reload"); reload_btn.clicked.connect(self.reload_page)
        home_btn = QPushButton("⌂"); home_btn.setToolTip("Home"); home_btn.clicked.connect(self.navigate_home)

        self.url_bar = QLineEdit()
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        self.https_icon = QLabel() # SECURITY: Visual HTTPS indicator
        self.https_icon.setPixmap(QPixmap(self.get_icon_path("unlock.png")).scaled(16, 16, Qt.AspectRatioMode.KeepAspectRatio))

        # UI/UX: Add Bookmark button is now prominent.
        self.add_bookmark_btn = QPushButton("★ Add to Faves")
        self.add_bookmark_btn.clicked.connect(self.show_add_bookmark_dialog)

        url_layout = QHBoxLayout()
        url_layout.setContentsMargins(0,0,0,0)
        url_layout.addWidget(self.https_icon)
        url_layout.addWidget(self.url_bar)
        url_widget = QWidget()
        url_widget.setLayout(url_layout)

        nav_toolbar.addWidget(back_btn)
        nav_toolbar.addWidget(fwd_btn)
        nav_toolbar.addWidget(reload_btn)
        nav_toolbar.addWidget(home_btn)
        nav_toolbar.addWidget(url_widget)
        nav_toolbar.addWidget(self.add_bookmark_btn)

    def setup_menu_bar(self):
        # UI/UX UPGRADE: A standard menu bar for a desktop application feel.
        menu_bar = self.menuBar()

        file_menu = menu_bar.addMenu("&File")
        new_tab_action = QAction("New Tab", self)
        new_tab_action.triggered.connect(lambda: self.add_new_tab(QUrl(CONFIG["default_homepage"])))
        file_menu.addAction(new_tab_action)

        exit_action = QAction("Exit", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        tools_menu = menu_bar.addMenu("&Tools")
        # Placeholder for future tools, like developer tools or addon management

        help_menu = menu_bar.addMenu("&Help")
        about_action = QAction("About Koralai Surf", self)
        about_action.triggered.connect(self.show_about_dialog)
        help_menu.addAction(about_action)

    # --- Core Browser Functionality ---
    def add_new_tab(self, qurl, label="New Tab"):
        browser = QWebEngineView()

        # SECURITY FEATURE: Custom page class to handle security checks and pop-ups.
        page = CustomWebEnginePage(self)
        browser.setPage(page)

        browser.settings().setAttribute(QWebEngineSettings.WebAttribute.JavascriptCanOpenWindows, True)
        browser.settings().setAttribute(QWebEngineSettings.WebAttribute.FullScreenSupportEnabled, True)

        browser.setUrl(qurl)
        i = self.tabs.addTab(browser, label)
        self.tabs.setCurrentIndex(i)

        # Connect signals
        browser.urlChanged.connect(lambda qurl, browser=browser: self.update_url_bar(qurl, browser))
        browser.loadFinished.connect(lambda _, browser=browser, i=i: self.tabs.setTabText(i, browser.page().title()[:25]))
        browser.loadProgress.connect(lambda p: self.status_bar.showMessage(f"Loading... {p}%"))

    def close_tab(self, i):
        if self.tabs.count() < 2: self.close()
        else: self.tabs.removeTab(i)

    # --- Navigation ---
    def get_current_browser(self):
        return self.tabs.currentWidget()

    def go_back(self):
        browser = self.get_current_browser()
        if browser: browser.back()

    def go_forward(self):
        browser = self.get_current_browser()
        if browser: browser.forward()

    def reload_page(self):
        browser = self.get_current_browser()
        if browser: browser.reload()

    def navigate_home(self):
        browser = self.get_current_browser()
        if browser: browser.setUrl(QUrl(CONFIG["default_homepage"]))

    def navigate_to_url(self):
        browser = self.get_current_browser()
        if browser:
            raw_url = self.url_bar.text()
            # SECURITY: Auto-prepend https for better security by default
            if not raw_url.startswith(('http://', 'https://')):
                qurl = QUrl('https://' + raw_url)
            else:
                qurl = QUrl(raw_url)
            browser.setUrl(qurl)

    # --- UI Updaters ---
    def update_url_bar(self, qurl, browser=None):
        if browser and browser != self.get_current_browser(): return

        self.url_bar.setText(qurl.toString())
        self.url_bar.setCursorPosition(0)

        # SECURITY: Update lock icon based on URL scheme
        is_secure = qurl.scheme() == 'https'
        icon_name = "lock.png" if is_secure else "unlock.png"
        tooltip = "Secure Connection (HTTPS)" if is_secure else "Insecure Connection (HTTP)"
        self.https_icon.setPixmap(QPixmap(self.get_icon_path(icon_name)).scaled(16, 16, Qt.AspectRatioMode.KeepAspectRatio))
        self.https_icon.setToolTip(tooltip)

    def update_ui_on_tab_change(self, i):
        if i > -1:
            browser = self.tabs.widget(i)
            if browser:
                self.update_url_bar(browser.url(), browser)

    # --- Bookmarking ("Faves Manager") ---
    def refresh_bookmarks_list(self):
        self.bookmarks_list.clear()
        bookmarks = self.db_manager.get_bookmarks()
        for bookmark in bookmarks:
            # UI/UX: Custom widget for a richer display
            item_widget = QWidget()
            item_layout = QVBoxLayout(item_widget)
            item_layout.setContentsMargins(5, 5, 5, 5)
            title_label = QLabel(bookmark['title'])
            title_label.setStyleSheet("font-weight: bold;")
            url_label = QLabel(bookmark['url'])
            url_label.setStyleSheet("color: #555;")
            item_layout.addWidget(title_label)
            item_layout.addWidget(url_label)

            list_item = QListWidgetItem(self.bookmarks_list)
            list_item.setSizeHint(item_widget.sizeHint())
            # Store the full bookmark data in the item
            list_item.setData(Qt.ItemDataRole.UserRole, dict(bookmark))
            self.bookmarks_list.addItem(list_item)
            self.bookmarks_list.setItemWidget(list_item, item_widget)

    def on_bookmark_selected(self, item):
        bookmark_data = item.data(Qt.ItemDataRole.UserRole)
        self.add_new_tab(QUrl(bookmark_data['url']), bookmark_data['title'])

    def show_bookmark_context_menu(self, pos):
        item = self.bookmarks_list.itemAt(pos)
        if not item: return

        bookmark_data = item.data(Qt.ItemDataRole.UserRole)
        menu = QMenu()
        open_action = menu.addAction("Open in New Tab")
        delete_action = menu.addAction("Delete Favorite")

        action = menu.exec(self.bookmarks_list.mapToGlobal(pos))

        if action == open_action:
            self.on_bookmark_selected(item)
        elif action == delete_action:
            reply = QMessageBox.question(self, "Confirm Delete",
                f"Are you sure you want to delete '{bookmark_data['title']}'?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.Yes:
                self.db_manager.delete_bookmark(bookmark_data['id'])
                self.refresh_bookmarks_list()

    # --- Dialogs ---
    def show_add_bookmark_dialog(self):
        browser = self.get_current_browser()
        if not browser: return

        dialog = QDialog(self)
        dialog.setWindowTitle("Add a New Favorite")
        layout = QFormLayout(dialog)

        title_input = QLineEdit(browser.page().title())
        url_input = QLineEdit(browser.url().toString())
        url_input.setReadOnly(True) # URL should not be edited
        notes_input = QLineEdit()
        tags_input = QLineEdit()
        tags_input.setPlaceholderText("e.g., work, python, fun")

        layout.addRow("Title:", title_input)
        layout.addRow("URL:", url_input)
        layout.addRow("Notes:", notes_input)
        layout.addRow("Tags:", tags_input)

        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)

        if dialog.exec():
            success = self.db_manager.add_bookmark(
                title_input.text(),
                url_input.text(),
                notes_input.text(),
                tags_input.text()
            )
            if success:
                self.refresh_bookmarks_list()
            else:
                QMessageBox.warning(self, "Already Exists", "This URL is already in your favorites.")

    def show_about_dialog(self):
        QMessageBox.about(self, "About Koralai Surf",
            "Version 1.0.0\n\nYour private, secure content management browser.\n"
            "Built for focused browsing and easy content curation.")

    # --- Utility ---
    def get_icon_path(self, icon_name):
        # In a real app, icons would be in a resource folder.
        # This is a placeholder for loading icons.
        return f"./icons/{icon_name}" # Assumes an 'icons' folder exists

# --- Custom Web Engine Page for Security and Popups ---
class CustomWebEnginePage(QWebEnginePage):
    """
    UPGRADE: Overriding QWebEnginePage to intercept navigation, popups, and trackers.
    """
    def __init__(self, parent_window):
        super().__init__(parent_window)
        self.parent_window = parent_window
        # FEATURE: Simple list of known tracker domains to block
        self.tracker_domains = ["doubleclick.net", "google-analytics.com", "facebook.net"]

    def acceptNavigationRequest(self, url, type, isMainFrame):
        """
        SECURITY: This is the main gatekeeper for all navigation.
        """
        # 1. Tracker blocking
        if any(domain in url.host() for domain in self.tracker_domains):
            print(f"DIAG-SECURITY: Blocked tracker request to {url.host()}")
            return False # Refuse the request

        # 2. Ask before navigating to a new root domain
        if isMainFrame and type == QWebEnginePage.NavigationType.NavigationTypeLinkClicked:
            current_host = self.url().host()
            new_host = url.host()
            if current_host != new_host:
                reply = QMessageBox.question(self.parent_window, "External Navigation",
                    f"You are about to navigate to a new domain:\n\n{new_host}\n\nDo you want to proceed?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.Yes)
                if reply == QMessageBox.StandardButton.No:
                    return False # User cancelled navigation

        return super().acceptNavigationRequest(url, type, isMainFrame)

    def createWindow(self, type):
        """
        FEATURE: Handle requests for new windows (e.g., from `window.open()`).
        This allows for the "pop out" content viewer functionality.
        """
        # Create a new, minimal window for the popup
        popup_view = QWebEngineView()
        popup_window = KoralaiMainWindow() # Re-using main window for simplicity
        popup_window.setCentralWidget(popup_view)
        # You could create a more minimal window class here

        # This is important: return the QWebEnginePage of the new view
        return popup_view.page()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setApplicationName("KoralaiSurf")
    # You would need to create an 'icons' folder with lock.png and unlock.png for the UI to be complete.
    window = KoralaiMainWindow()
    window.show()
    sys.exit(app.exec())