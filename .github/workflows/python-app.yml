name: KAiSurf Python CI/CDon:push:branches: [ "main" ]pull_request:branches: [ "main" ]permissions:contents: write # REQUIRED for creating the GitHub Release/Tagjobs:build_and_test:name: Build, Test, and Lintruns-on: ubuntu-latestoutputs:app_version: ${{ steps.version.outputs.app_version }} # Pass version to the Release jobsteps:
- uses: actions/checkout@v4

# --- 1. Environment Setup ---
- name: Set up Python 3.10
  uses: actions/setup-python@v3
  with:
    python-version: "3.10"

- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    # Install testing/linting tools and app requirements
    pip install flake8 pytest python-dotenv PyJWT Flask Flask-SQLAlchemy
    # Assuming requirements.txt is used in the future
    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
# --- 2. Linting and Testing ---
- name: Lint with flake8
  run: |
    # Stop the build if there are Python syntax errors or undefined names
    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    # Treat all other errors as warnings
    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

- name: Test with pytest
  run: |
    # Runs the tests in test_app.py
    pytest

# --- 3. Version Extraction (For Unification) ---
- name: Extract Application Version
  id: version
  run: |
    # IMPORTANT: This assumes you define a '__version__ = "X.Y.Z"' string 
    # in your kaisurf_secured_test_app.py or a dedicated file.
    # This is a placeholder that extracts a mock version for demonstration.
    # For a real project, use 'grep' or 'awk' to pull a version from a file.
    MOCK_VERSION=$(date +'%Y.%m.%d').${{ github.run_number }}
    echo "app_version=$MOCK_VERSION" >> $GITHUB_OUTPUT
    echo "Extracted App Version: $MOCK_VERSION"
release:name: Create GitHub Release# Only run this job if the build_and_test job was successfulneeds: build_and_test# Only run this job on push events to the 'main' branchif: github.ref == 'refs/heads/main' && success()runs-on: ubuntu-lateststeps:
- name: Create Release
  uses: softprops/action-gh-release@v1
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Default token provided by GitHub Actions
  with:
    tag_name: v${{ needs.build_and_test.outputs.app_version }}
    name: Release v${{ needs.build_and_test.outputs.app_version }}
    body: |
      Automated release for version ${{ needs.build_and_test.outputs.app_version }}.
      All CI tests passed successfully.
    draft: false
    prerelease: false
