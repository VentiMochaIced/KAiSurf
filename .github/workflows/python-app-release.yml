name: KAiSurf Python CI/CDon:push:branches: [ "main" ]pull_request:branches: [ "main" ]permissions:contents: write # REQUIRED for creating the GitHub Release/Tagjobs:build_and_test:name: Build, Test, and Lintruns-on: ubuntu-latestoutputs:app_version: ${{ steps.version.outputs.app_version }} # Pass version to the Release jobsteps:uses: actions/checkout@v4--- 1. Environment Setup ---name: Set up Python 3.10uses: actions/setup-python@v3with:python-version: "3.10"name: Install dependenciesrun: |python -m pip install --upgrade pipInstall testing/linting tools and app requirementspip install flake8 pytest python-dotenv PyJWT Flask Flask-SQLAlchemyAssuming requirements.txt is used in the futureif [ -f requirements.txt ]; then pip install -r requirements.txt; fi--- 2. Linting and Testing ---name: Lint with flake8run: |Stop the build if there are Python syntax errors or undefined namesflake8 . --count --select=E9,F63,F7,F82 --show-source --statisticsTreat all other errors as warningsflake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statisticsname: Test with pytestrun: |Runs the tests in test_app.pypytest--- 3. Version Extraction (For Unification) ---name: Extract Application Versionid: versionrun: |CRITICAL FIX: Read the version string directly from the application fileSearches for version = "X.Y.Z" and extracts the version stringAPP_VERSION=$(grep -E "^version\s*=\s*['"]" kaisurf_secured_app.py | cut -d "'" -f 2 | cut -d '"' -f 2)Fallback in case grep fails or no version is foundif [ -z "APP_VERSION" ]; thenecho "Warning: __version__ not found. Using date-based fallback."APP_VERSION=(date +'%Y.%m.%d').${{ github.run_number }}fiecho "app_version=$APP_VERSION" >> $GITHUB_OUTPUTecho "Extracted App Version: $APP_VERSION"release:name: Create GitHub ReleaseOnly run this job if the build_and_test job was successfulneeds: build_and_testOnly run this job on push events to the 'main' branchif: github.ref == 'refs/heads/main' && success()runs-on: ubuntu-lateststeps:name: Create Releaseuses: softprops/action-gh-release@v1env:GITHUB_TOKEN: {{ secrets.GITHUB_TOKEN }} # Default token provided by GitHub Actionswith:tag_name: v{{ needs.build_and_test.outputs.app_version }}name: Release v${{ needs.build_and_test.outputs.app_version }}body: |Automated release for version ${{ needs.build_and_test.outputs.app_version }}.All CI tests passed successfully.draft: falseprerelease: false